{% from "spark/defaults.yaml" import lookup_map as lmap,versions as vmap  with context %}

{% set spark = salt['grains.filter_by'](lmap, merge=salt['pillar.get']('spark:lookup', salt['grains.get']('spark:lookup', {}), merge=True), base='default') %}

{% with %}

{% if spark.with_hadoop == True %}
  {% set versions = vmap["with_hadoop"] %}
{% else %}
  {% set versions = vmap["without_hadoop"] %}
{% endif %}


{% set v = spark.version %}
{% if v not in versions %}
{% set v = "default" %}
{% endif %}


{% set _name = versions[v]["name"] %}
{% set _hash = versions[v]["hash"]%}





{% if versions is defined and spark.version in versions.keys() %}
  {% set archive_name = versions[spark.version]['name'] %}
{% else %}
  {% set archive_name = "spark-%s-bin-without-hadoop"|format(spark.version) %}
  {% set _hash = "" %}
{% endif %}

{% set archive_name = archive_name % spark %}
{% set url = spark.archive_url % spark %}
{% set real_root = "%s/%s"|format(spark.prefix, archive_name) %}

{% do spark.update({
  'real_root': real_root,
  'alt_root': "%s/spark"|format(spark.prefix),
  'bin_dir': '%s/bin'|format(real_root),
  "archive_name": archive_name,
  "archive_url": "%s/%s.%s"|format(url, archive_name, spark.archive_type),
  "archive_hash": _hash,
  "master_uri": "spark://%s:%s"|format(spark.master_host, spark.master_port)
}) %}
{% endwith %}
